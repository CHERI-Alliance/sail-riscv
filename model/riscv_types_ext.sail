/*=======================================================================================*/
/*  This Sail RISC-V architecture model, comprising all files and                        */
/*  directories except where otherwise noted is subject the BSD                          */
/*  two-clause license in the LICENSE file.                                              */
/*                                                                                       */
/*  SPDX-License-Identifier: BSD-2-Clause                                                */
/*=======================================================================================*/

/*
 * Types used in supporting extensions for page-table walks.
 *
 * There are two types involved:
 *
 * . An accumulator, passed down from the root to the leaves (ext_ptw)
 * . Errors embedded within the PTW_Error union
 *
 * Information flow begins with init_ext_ptw (: ext_ptw) being routed,
 * via the translateNN functions and/or walkNN functions, to the
 * checkPTEPermission function, which is the intended point of
 * interaction with extensions.
 *
 * checkPTEPermission will be called repeatedly at each PTE, each call
 * seeing the accumulator state generated by a successful result of
 * the previous call.  On failure, this function is expected to
 * also generate a PTW_Error, both of which will be returned to the code
 * calling into translation.
 *
 * If translation ultimately succeeds, the final accumulator state is
 * captured and will be returned to the code calling into translation.
 *
 * If translation ultimately fails, the accumulator at the time of
 * failure and the PTW_Error value are returned to the caller.
 */

type ext_ptw = unit
let init_ext_ptw : ext_ptw = ()

/* This type supports extensions to the exceptions defined in the ISA. */
type ext_exc_type = unit /* No exception extensions */

/* Default conversion of extension exceptions to bits */
val ext_exc_type_to_bits : ext_exc_type -> exc_code
function ext_exc_type_to_bits(e) = 0x018 /* First code for a custom extension */

val ext_exc_type_of_bits : exc_code -> ext_exc_type
function ext_exc_type_of_bits(e) = internal_error(__FILE__, __LINE__, "unknown exception type")

/* Default conversion of extension exceptions to integers */
val num_of_ext_exc_type : ext_exc_type -> range(0, xlen - 1)
function num_of_ext_exc_type(e) = 24 /* First code for a custom extension */

/* Default conversion of extension exceptions to strings */
val ext_exc_type_to_str : ext_exc_type -> string
function ext_exc_type_to_str(e) = "extension-exception"

/* This type supports extensions to the exceptions reported by CSR accesses. */
type ext_csr_exc_type = unit

/* Default fetch address checks */
type ext_fetch_addr_error = unit
